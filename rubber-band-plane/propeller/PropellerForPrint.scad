
/*
 *  Fully Parameterized Two Blade Propeller/Windwheel
 *  Copyright (C) 2011 Lukas SÃ¼ss
 *  lukas.suess at gmx.at
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

/*
This is a simple parameterized "Two Blade Propeller/Windwheel"

It is optimized for supportless printing (blades printet vertically)
and designd out of two parts so that
even on small buildspace printers pretty big propellers can be made
Examples:
(cupcake: 10x10x13 cm^3) => max 20cm propeller (28cm diagonal)
(ultimaker: 21x21x21 cm3) => max 42cm propeller (59cm diagonal)

The "wheel" might work for water too, 
just choose a higher bladeangle
and make it shorter & wider

Use F6 to build this!
There's an option to activate fast F5 preview but this  
comes at the expense of not/wrongly showing some geometry


feel free to modify!!
some ideas how to improve & extend the design are appendet at the very bottom of this file 

*/





bladeangle = 30; // measured from the "mounting plane"

bore = 5; // hole diameter (not scaled with propeller length)
tblade = 2; // thickness of the rotor blades (not scaled with propeller length)


//tipElipticallity = 0.61803; // more beautiful but more overhang
tipElipticallity = 1; //no effect?!


length = 2      *120.0; //length of the final Propeller (buildspace*2) :) (default=98)
wmax = length/7  *0.9; // maximal width of the blade (too big => bug visible) (default=1.0)
wmin = length/10 *0.8; // width of mounting block (in blade orientation!)
// (wmin > wmax) suprisingly does not lead to a total mess (but it shouldnt be used)

lmount = wmin    *0.8; // length of the mounting block  (x-axis)


// AUTOgenerated: 
// (change only if you know what you are doing)
  l = length - 2*(wmax/2)/tipElipticallity;  // length to the point of maximal width of the blade
  teffmount = (wmin*tan(bladeangle)+tblade)*cos(bladeangle); // mounting block thickness in mounting direction
// END Autogenerated


//tipElipticallity = 1; 
tipElipticallity = 0.61803; // more beautiful but more overhang

//mountsmooth = 0;// l*0.15; // SET IN THE onlyF6 IF somehow (code to clean)
mountsmooth = l*0.1;// l*0.15; 


// resolution related
onlyF6 = true; // set false for fast but incorrect preview
vert = 32; // small cylinder resolution
vert2 = 64; // big cylinder resolution
eps = 0.02; // zero would be best but leads to image artefacts (just keep it)





//OUTPUT!!:
printconfig1();   // outputs file for stl-export & print
//combinedview(); // how the final propeller looks


// END OF ADJUSTING AREA  
// lookout for #############'s below








// TEST VISUALISATIONS:
//halfrotor(true);
//halfrotor(false);
// translate([0,-3*tblade,0]) cbc(length,5,5); // lengthcheck


module printconfig1()
{
  halfrotor(true);
  translate([length/2-lmount/2,1.5*teffmount,0])
  rotate(180,[0,0,1]) halfrotor(false);
}
module combinedview()
{
  rotate(-bladeangle,[1,0,0])  
  halfrotor(true);
  
  translate([0,0,wmin*cos(bladeangle)])
  rotate(180+bladeangle,[1,0,0]) 
  rotate(180,[0,0,1]) halfrotor(false);
}


// THIS IS THE MAIN PART OF THE CODE
module halfrotor(gender)
{
//rotate(-bladeangle,[1,0,0]) // to get the picture (deactivate for print)
{
difference()
{
  union()
  {
    // Blade
    translate([lmount/2+eps,-tblade/2,0])
    cube([ (l-lmount)/2,tblade,wmax ]);
    
    // Tips
    translate([l/2,0,wmax/2])
    rotate(90,[1,0,0]) scale([1/tipElipticallity,1,1])
    cylinder(r=wmax/2,h=tblade,center=true,$fn=vert2);
    // to avoid overhang replace the half ellypse wit a quater ellypse here #########


    // TODO smear out to the sides (+2*blockround)
    intersection() // mounting block POS
    {
      translate([1/2*mountsmooth+eps,0,wmin/2]) 
        cbc(lmount+1*mountsmooth,l,wmin);
      translate([0,0,wmin/2]) rotate(bladeangle,[1,0,0])
        cbc(lmount+2*mountsmooth,teffmount,l);

     // symmetric edge breaking alternative
     translate([1/2*mountsmooth+eps,0,wmin/2])
     rotate(2*bladeangle-90,[1,0,0]) 
       cbc(lmount+1*mountsmooth,wmin,l/2); // edge breaking
    }
  }

   // main blade curvature ##### **see ideas
   translate([lmount/2,0,wmin+0.01])
   rotate(90,[1,0,0])
   S_cutter((l-lmount/2)*0.45,wmax-wmin,2*vert2); // why is 0.5 100% ??
  

  //bore
  translate([0,0,wmin/2])
  rotate(90+bladeangle,[1,0,0])
  //  ############################## add ballbearing-"groove" here
  {
    cylinder(r=bore/2,h=l,$fn=vert,center=true);
    // how thick is the blde here
  }
  


  // main blade curvature
  if(onlyF6==true)
  {
    thinningblade();
    mirror([0,1,0]) thinningblade();
  }

  if (gender) { femalecut(); }
  if (! gender) { malecut(); } 

}
}
}//end module







module cbc(x,y,z)  //convenience
{  cube([x,y,z],center=true); }

module thinningblade()
{
  // TODO: other side
  translate([mountsmooth+lmount/2+eps,tblade/2,0])
  mirror([-1,0,0])
  S_cutter(mountsmooth+eps,(teffmount*1.51-tblade)/2,2*vert2); // << to simplify ######
  // 1.51 is just randon (should be calculated exactly!) =>
  // the thinnings don't reach inward to the mountblock or "overreach" it! (minor BUG) #######
}


module femalecut()
{
  union() //mount block cutter male
  {
    translate([0,-(teffmount/2)/cos(bladeangle),0]) // SwS
    translate([0,0,wmin/2])
    rotate(bladeangle,[1,0,0])
      cbc(lmount+eps,teffmount+eps,3*wmin); 
  
  
    translate([0,+(teffmount/8)/cos(bladeangle)-eps,0]) // SwS
    translate([0,0,wmin/2])
    rotate(bladeangle,[1,0,0])
      cbc(lmount/3,teffmount/4,3*wmin); //rille
  }
}
module malecut() // DANGER creats overhangs
{
  difference() //mount block cutter female
  {
    translate([0,+(teffmount/2)/cos(bladeangle),0]) // SwS
    translate([0,0,wmin/2])
    rotate(bladeangle,[1,0,0])
      cbc(lmount+eps,teffmount+eps,3*wmin); //mount block cutter
  
  
    translate([0,+(teffmount/8)/cos(bladeangle)-eps,0]) // SwS
    translate([0,0,wmin/2])
    rotate(bladeangle,[1,0,0])
      cbc(lmount/3,teffmount/4,3*wmin); //rille
  }
}
// SwS ... swap sign to swap sides of male and female part
// but don't do it! 
// reason: the male blade might have mid air overhangs if (bore > width of the groove)




// S-shape starting horizontally in xyplane into the 1st quadrant (upperhalf filled)
module S_cutter(dx,dy,resol) 
{
  // in and out is horizontal; that makes the curve unambiguous
  d = 80;
  rr = 1/4*(dy +dx*dx/dy); // Derivation: sqrt((rr-dy/2)^2+(dx/2)^2)=rr 
  //echo(rr);

  intersection()
  {
    difference()
    {
      union()
      {
        translate([0,dy/2,-d/2+d*0.05]) cube([dx,2*rr,d*0.9]); // cutter BODY
        
        translate([0,rr,0])  // PLUS cylinder
       cylinder(r=rr,h=d,$fn=resol,center=true);
      }

      translate([dx,dy-rr,0]) // MINUS
      cylinder(r=rr,h=d,$fn=resol,center=true);
      }
      translate([2*rr,2*rr,0]) cube([4*rr,4*rr,d],center=true);
    }
}







/*
some ideas for improvement:


> add grooves for ball bearings

> desigh a fitting weather vane
> design a fitting mount

> COOL: add butten-cell powerd laserpointers to get a free lasershow at squally new moon nights

> generalize to 3 or more blades (4 noncoplanar should be easy)

> alter the blade shapes to something less classic but more fancy

> mount (suitable!) whistles to the tips (so your child wont be overheard when cycling)
>   dont forget the (slidable?) muting plug


> combine some of the above


what I might add:
> TODO: ** change the z shaping so that the blade isnt always smallest at the end of the mountng block
>   and tickest just at the tip roundingdelayd s start
TODO:
change propellertipshape?
make the bore more acessible for potential modifiers!!




or you might wanna go crazy and do something like this:

> right now its just a toy but you could:
>> modify the blade to a more aerodynamic teardropshape
>> twist the blade
>> make a coupling for a dynamo

>>> remove the typical OpenSCAD little edgedness 
>>> due to openscads fillet hardness

> make the bladeangle physically adjustable


# print a lot of them all with different random parameters in reasonable margins
#   and mount them on a crazy "wind sculpture"



> determine optimal bladethickness for printing and denote it here
> or more general: optimize parameters for a good print

*/





